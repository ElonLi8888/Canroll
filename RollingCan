import cv2
import numpy as np


# Resizes the camera
def resize_with_aspect_ratio(image, width=None, height=None, inter=cv2.INTER_AREA):
   dim = None
   (h, w) = image.shape[:2]

   if width is None and height is None:
       return image, 1.0

   if width is None:
       r = height / float(h)
       dim = (int(w * r), height)
   else:
       r = width / float(w)
       dim = (width, int(h * r))

   resized_image = cv2.resize(image, dim, interpolation=inter)
   return resized_image, r


# Function to detect the can
def detect_cans_in_video():
   cap = cv2.VideoCapture("/Users/pl1005890/Desktop/notcan.mp4")

   while True:
       ret, frame = cap.read()
       # cap = turn_vid(cap)
       if not ret:
           break
       # rotate the frame 90 degrees
       frame = cv2.rotate(frame, cv2.ROTATE_90_CLOCKWISE)
       # Call resize function to enhance circle detection accuracy
       resized_frame, scale_factor = resize_with_aspect_ratio(frame, width=300)

       # Gray and blur photos for better image processing
       gray = cv2.cvtColor(resized_frame, cv2.COLOR_BGR2GRAY)
       blurred = cv2.GaussianBlur(gray, (9, 9), 2)


       # Detect circles with HoughCircles
       circles = cv2.HoughCircles(
           blurred,
           cv2.HOUGH_GRADIENT,
           dp=1.2,
           minDist=25,
           param1=120,
           param2=100,
           minRadius=0,
           maxRadius=0
       )

       overlay_frame = frame.copy()

       if circles is not None:
           circles = np.uint16(np.around(circles[0, :]))

           for circle in circles:
               x, y, r = circle
               # Scale the size of the drawn circle back to the original
               x = int(x * (1 / scale_factor))
               y = int(y * (1 / scale_factor))
               r = int(r * (1 / scale_factor))

               # Draw the outer circle on the original frame
               cv2.circle(overlay_frame, (x, y), r, (0, 255, 0), 3)
               # Draw the center of the circle on the original frame
               cv2.circle(overlay_frame, (x, y), 2, (0, 0, 255), 3)

       cv2.imshow("Original Video with Circle Detection", overlay_frame)

       # Exit on pressing 'q'
       if cv2.waitKey(1) & 0xFF == ord('q'):
           break

   cap.release()
   cv2.destroyAllWindows()


# Start the program
detect_cans_in_video()
